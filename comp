#!/bin/bash

GR='\033[1;4;32m'
NC='\033[0m'
RD='\033[1;4;31m'
MODEL=${PWD##*/}
TOOLS=~/kernel/comp-tools
DUMP=~/kernel/out/zdump
GCC=$(ls ~/kernel/toolchain/)
TOOLCHAIN=~/kernel/toolchain/$GCC/bin
OUTSRC=~/kernel/out/$MODEL-out
ZIMAGE=~/kernel/$MODEL/arch/arm/boot

# Make dir
[ ! -d ~/kernel/out ] && mkdir ~/kernel/out
[ ! -d $DUMP ] && mkdir $DUMP
[ ! -d $OUTSRC ] && mkdir $OUTSRC

rm -f $OUTSRC/system/lib/modules/*
rm -f $ZIMAGE/zImage
rm -f $DUMP/dt.img
rm -f $DUMP/ramdisk-$MODEL.cpio.lz4
echo -e "${GR}Cleanup Files${NC}"

read -p "ENTER RELEASE VERSION : " release
if [ -f $OUTSRC/$MODEL-lucid-b$release.zip ]; then
	rm -rf $OUTSRC/$MODEL-lucid-b$release.zip
fi
export KBUILD_BUILD_VERSION="$release"
make -j$[$(grep -c ^processor /proc/cpuinfo)-1]

# Copy Modules to Out Folder
if [ -f $ZIMAGE/zImage ]; then
        find -name '*.ko' -exec cp -av {} $OUTSRC/system/lib/modules \;
else
	echo -e "${RD}ERROR: COMPILE ERROR${NC}"
	exit 0
fi

# Repack Ramdisk
if [ ! -d $DUMP/ramdisk-$MODEL ]; then
        if [ ! -f boot.img ]; then
                echo -e "${RD}No Boot Image Dump${NC}"
                exit 0
        fi
        $TOOLS/./mkboot boot.img $DUMP/ramdump-$MODEL
        cp -ar $DUMP/ramdump-$MODEL/ramdisk $DUMP/ramdisk-$MODEL
        mv boot.img $DUMP/boot-$MODEL.img
fi

# For Xperia Devices
if [ -f README_Xperia ]; then
	cd $DUMP/ramdisk-$MODEL
	find . | cpio -H newc -o > $DUMP/ramdisk.cpio
	cp $DUMP/ramdisk.cpio $DUMP/ramdump-$MODEL/ramdisk/sbin/
	cd $DUMP/ramdump-$MODEL/ramdisk
	find . | cpio -H newc -o | gzip > $DUMP/ramdisk-$MODEL.cpio.gz
	if [ -f $ZIMAGE/zImage-dtb ]; then
	$TOOLS/xperia/./dtbToolCM --force-v2 -o $DUMP/dt.img -s 2048 -p ~/kernel/$MODEL/scripts/dtc/ $ZIMAGE/
		if [ -f $DUMP/ramdisk-$MODEL.cpio.gz ]; then
		$TOOLS/xperia/./mkbootimg --cmdline "`cat $DUMP/ramdump-$MODEL/cmd_line`" \
		--base `cat $DUMP/ramdump-$MODEL/base_addr` \
		--kernel $ZIMAGE/zImage --ramdisk $DUMP/ramdisk-$MODEL.cpio.gz \
		--ramdisk_offset `cat $DUMP/ramdump-$MODEL/ramdisk_offset` \
		-o $OUTSRC/boot.img \
		--dt $DUMP/dt.img --tags_offset `cat $DUMP/ramdump-$MODEL/tags_offset`
		echo -e "${GR}boot.img compiled${NC}"
        else
	        echo -e "${RD}ERROR: RAMDISK ERROR${NC}"
	        exit 0
        	fi
	fi
else
cd $DUMP/ramdisk-$MODEL

find . | cpio -H newc -o | $TOOLS/lz4demo -c0 stdin stdout > $DUMP/ramdisk-$MODEL.cpio.lz4

	# Rebuilt Boot.img
	if [ -f $ZIMAGE/zImage-dtb ]; then
	$TOOLS/./dtbTool -o $DUMP/dt.img -s 2048 -p ~/kernel/$MODEL/scripts/dtc/ $ZIMAGE/
	        if [ -f $DUMP/ramdisk-$MODEL.cpio.lz4 ]; then
	        $TOOLS/./mkbootimg --kernel $ZIMAGE/zImage --ramdisk $DUMP/ramdisk-$MODEL.cpio.lz4 \
	        --cmdline "`cat $DUMP/ramdump-$MODEL/cmd_line`" \
	        --base `cat $DUMP/ramdump-$MODEL/base_addr` --pagesize `cat $DUMP/ramdump-$MODEL/page_size` \
	        --dt $DUMP/dt.img --offset `cat $DUMP/ramdump-$MODEL/ramdisk_offset` -o $OUTSRC/boot.img
	        echo -e "${GR}boot.img compiled${NC}"
	        else
		        echo -e "${RD}ERROR: RAMDISK ERROR${NC}"
		        exit 0
	        fi
	else
	       if [ -f $DUMP/ramdisk-$MODEL.cpio.lz4 ]; then
	        $TOOLS/./mkbootimg --kernel $ZIMAGE/zImage --ramdisk $DUMP/ramdisk-$MODEL.cpio.lz4 \
	        --cmdline "`cat $DUMP/ramdump-$MODEL/cmd_line`" \
	        --base `cat $DUMP/ramdump-$MODEL/base_addr` --pagesize `cat $DUMP/ramdump-$MODEL/page_size` \
	        --offset `cat $DUMP/ramdump-$MODEL/ramdisk_offset` -o $OUTSRC/boot.img
	        echo -e "${GR}boot.img compiled${NC}"
	        else
		        echo -e "${RD}ERROR: RAMDISK ERROR${NC}"
		        exit 0
	        fi
	fi
fi
# Bump Boot.img for locked bootloaders
if [ -f $ZIMAGE/msm8974-g2* ]; then
cd $TOOLS

python2 open_bump.py -a $OUTSRC/boot.img
#mv ~/Downloads/g2/boot_bumped.img ~/Downloads/g2/boot.img
echo -e "${GR}boot.img patched${NC}"
fi
cd $OUTSRC

MODULES=/system/lib/modules/*.ko
for f in $MODULES
do
$TOOLCHAIN/$(ls $TOOLCHAIN | grep strip) --strip-unneeded $OUTSRC/$MODULES
done

zip -r $MODEL-lucid-b$release.zip META-INF rev system boot.img -x \*~
echo -e "${GR}Kernel Release $release is ready to flash${NC}"
